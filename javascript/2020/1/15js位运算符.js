/*

运算符   名称            描述
&        AND            如果两位都是 1 则设置每位为 1 
|        OR             如果两位之一为 1 则设置每位为 1 
^        XOR            如果两位只有一位为 1 则设置每位为 1
~        NOT            反转所有位 
<<       零填充左位移   通过从右推入零向左位移， 并使最左边的位脱落。
>>       有符号右位移   通过从左推入最左位的拷贝来向右位移， 并使最右边的位脱落。
>>>      填充右位移     通过从左推入零来向右位移， 并使最右边的位脱落。

                 实      例                     
操作       结果   等同于          结果
5 & 1      1      0101 & 0001     0001
5 | 1      5      0101 | 0001     0101
5 ^ 1      4      0101 ^ 0001     0100
~5         10     ~0101           1010  (使用了4位无符号二进制数，所以 ~ 5 返回 10 ，js使用32位有符号整数，所以返回-6)
5 << 1     10     0101 << 1       1010
5 >> 1     2      0101 >> 1       0010
5 >>> 1    2      0101 >>> 1      0010

*/

// JavaScript使用32位按位运算数，将数字储存为64位浮点数，但所有按位运算都以32位二进制数执行。
// 在执行位运算之前，JS将数字转换为32位有符号整数。执行按位操作后，结果将转换位64位JavaScript数。
//   ECMAScript位运算符是在数字底层（即表示数字的32个数位）进行操作的。     注意：所有整数字面量都默认存储为有符号整数。只有 ECMAScript 的位运算符才能创建无符号整数。
// (位31）00000000000000000000000000000000（位0）（31——0位数）从第一位（位0）开始表示2的0次方，第二位（位1）表示2的1次方...最后为2的31次方。没用到的位用0填充。
// 有符号整数使用最左边的位作为减号。
// 00000000000000000000000000010010（2的4次方加2的1次方，即2*2*2*2+2=18）表示18
// 练习实践区。
// var iNum = 18;
// alert(iNum.toString(2));//return 10010
// 
// var uNum = ~ 5;
// alert(uNum);//return -6;
// 
// alert('1111与0001的and运算结果是' + '"' + (1111 & 0001) + '"'); //return 1;
// alert('585与8的and运算结果是' + '"' + (585 & 8) + '"');//return 8;
// // 
// alert('585与8的or运算结果是' + '"' + (585 | 8) + '"');//585;
// alert('15与8的xor运算结果是' + '"' + (15 ^ 8) + '"');//7;
// 

// 32-bit有符号整数（二进制数）
// 00000000000000000000000001111111 == 64+32+16+8+4+2+1 == 127;//目前的64位系统理解啊哈哈哈
// 负数是正数的二进制补码加1
//  5（00000000000000000000000000000101）
// -5（11111111111111111111111111111011）
// 把十进制转为2进制：
document.getElementById("demo").innerHTML = dec2bin(-5);
// document.getElementById("demo").innerHTML = bin2dec(11111111111111111111111111111011);
function dec2bin(dec){
    return (dec >>> 0).toString(2);
}
// 把十进制转为2进制：
function bin2dec(bin){
    return parseInt(bin, 2).toString(10);
}